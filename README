Lolita
======
Lolita - sexy CMS


Requires
========
  - rails >= 2.3.8
  - rmagick >= 2.11
  - erubis >= 2.6.5
  - ya2yaml >= 0.26
  - factory_girl
  - zipruby >= 0.3.6
  - rspec-rails >= 1.3.2

  gem install rails rmagick erubis ya2yaml factory_girl zipruby rspec-rails

Example
=======
set up your config/database.yml
cd <your project>
ruby script/plugin install git://github.com/ithouse/lolita.git -r 2-3-stable
ruby script/plugin install git://github.com/ithouse/lolita_engines.git # Before Rails 3.0

# add this line in config/environment.rb before config block

  require File.join(File.dirname(__FILE__), '../vendor/plugins/lolita_engines/boot')

# add these lines in config/environment.rb in config block

  config.plugins = [ :lolita_engines, :lolita, :all ]
  config.plugin_paths += ["#{RAILS_ROOT}/vendor/plugins/lolita/plugins"]
  config.i18n.default_locale = :en
  config.i18n.load_path << Dir[File.join(RAILS_ROOT, 'config', 'locales', '**', '*.{rb,yml}')]
  config.i18n.load_path << Dir[File.join(RAILS_ROOT, 'vendor', 'plugins', 'lolita', 'config', 'locales', '**', '*.{rb,yml}')]

rake lolita:setup

Provide administrator credentials. If everything went well, you should be up and running with

ruby script/server

Log in to the backend through http://localhost:3000/system/login

Simple project example
======================

When Lolita is instaled then you are ready to create project controllers, models, views and helpers to work with Lolita.
Lets say you want to create page that allows any post comment by indicating name and coment text, by also you want to edit, create and 
delete comments from CMS backend. So you need to do following.

First thing to do is generate DB table.
# put this code in 1_create_comments.rb in db/migrate 
   class CreateComments < ActiveRecord::Migration
     def self.up
       create_table :comments do |t|
         t.string :commentator
         t.text   :text
         t.timestamps
       end
     end
     
     def self.down
        drop_table :comments
     end
   end

Now migrate database with rake db:migrate:all

Now we can create model for comments.
# this goes in app/models/comment.rb
   class Comment < Cms::Base
     validates_presence_of :text,:commentator
     
     def short_body
       self.body.to_s.slice(0..10)
     end
   end
   
Then controller can be created
# this goes in app/controller/comment.rb
  class CommentController < Managed
    allow :public=>[:post]
    
    def post
      if request.post?
        @comment=Comment.create(params[:comment])
      end
      @comments=Comment.find(:all,:order=>"created_at desc")
    end
    
    
    private
    
    def config
      {
        :tabs=>[
          {:type=>:content, :in_form=>true, :opened=>true, :fields=>[
           {:type=>:text, :field=>:commentator, :html=>{:maxlength=>255}},
           {:type=>:textarea, :field=>:text, :simple=>true}
          ]
        ],
        :list=>{
          :columns=>[{:default=>true,:width=>200,:field=>:commentator,:link=>true}, {:field=>:body, :function=>:short_body}],
          :options=>[:edit,:destroy]
        }
      }
    end
  end
  
Finaly views need to be created
# this goes in app/views/layout/default.html.erb
   <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

  <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    </head>
    <body>
      <%= yield %>
    </body>
  </html>
# this goes in app/views/comment/post.html.erb
  <div>
    <% form_for :comment, @comment, :url=>{:action=>:post} do |f| %>
      <%= f.label :comment, :commentator %>
      <%= f.text :commentator %>
      <br/>
      <%= f.lable :text %>
      <%= f.text_area :text %>
      <br/>
      <%= f.submit %>
    <% end %>
  </div>
  <table>
   <% @comments.each do |c| %>
    <tr>
      <td><%= c.commentator %>&nbsp;<%=c.created_at.strftime("%Y.%m.%d %H:%M")%></td>
      <td><%= c.body %></td>
    </tr>
   <% end %>
  </table>

All backend code will be generated by Lolita engine. For details see Managed documentation.

Copyright (c) 2011 IT House ltd., released under the MIT license
